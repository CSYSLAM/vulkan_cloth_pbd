#version 450

struct Particle {
	vec4 pos;
	vec4 vel;
	vec4 uv;
	vec4 normal;
};

layout(std430, binding = 0) buffer ParticleIn {
	Particle particleIn[ ];
};

layout(std430, binding = 1) buffer ParticleOut {
	Particle particleOut[ ];
};

// todo: use shared memory to speed up calculation

layout (local_size_x = 10, local_size_y = 10) in;

layout (binding = 2) uniform UBO 
{
	float deltaT;
	float particleMass;
	float bendingAngle;
	float damping;
	float restDistH;
	float restDistV;
	float restDistD;
	float sphereRadius;
	vec4 spherePos;
	vec4 gravity;
	ivec2 particleCount;
} params;

layout (push_constant) uniform PushConsts {
	uint calculateNormals;
} pushConsts;

// Return Delta p1
vec3 calculateDistanceConstraints(vec3 p1, vec3 p2, float restLength)
{
    vec3 dir = p2 - p1;
    float len = length(dir);
    return (len - restLength) * dir / (2 * len);
}

vec3 calculateBendingConstraints(vec3 _p1, vec3 _p2, vec3 _p3, vec3 _p4, int id)
{
    vec3 p2 = _p2 - _p1;
    vec3 p3 = _p3 - _p1;
    vec3 p4 = _p4 - _p1;

    vec3 n1 = normalize(cross(p2, p3));
    vec3 n2 = normalize(cross(p2, p4));
    float d = dot(n1, n2);
    
    mat4 q = mat4(0.0);

    q[2] = vec4((cross(p2, n2) + cross(n1, p2) * d) / max(length(cross(p2, p3)), 0.0001), 0.0);
    q[3] = vec4((cross(p2, n1) + cross(n2, p2) * d) / max(length(cross(p2, p4)), 0.0001), 0.0);
    q[1] = vec4(-(cross(p3, n2) + cross(n1, p3) * d) / max(length(cross(p2, p3)), 0.0001)
        -(cross(p4, n1) + cross(n2, p4) * d) / max(length(cross(p2, p4)), 0.0001), 0.0);
    q[0] = vec4(-(vec3(q[1].xyz) + vec3(q[2].xyz) + vec3(q[3].xyz)), 0.0);

    float div = 0.0;
    for (int i = 0; i < 4; i++)
    {
        float mag = length(vec3(q[i].xyz));
        div += mag * mag;
    }

    float k = -sqrt(max(1.0 - d * d, 0.0001)) * (acos(clamp(d, -1.0, 1.0)) - params.bendingAngle) / max(div, 0.0001);

    return k * vec3(q[id].xyz);
}

void main() 
{
	uvec3 id = gl_GlobalInvocationID; 

	uint index = id.y * params.particleCount.x + id.x;
	if (index > params.particleCount.x * params.particleCount.y) 
		return;

	// Initial force from gravity
	vec3 force = params.gravity.xyz * params.particleMass;

	vec3 pos = particleIn[index].pos.xyz;
	vec3 vel = particleIn[index].vel.xyz;

	// Integrate
	force += (-params.damping * vel);
	vec3 f = force * (1.0 / params.particleMass);
	// particleOut[index].pos = vec4(pos + vel * params.deltaT + 0.5 * f * params.deltaT * params.deltaT, 1.0);
	particleOut[index].vel = vec4(vel + f * params.deltaT, 0.0);
    pos = pos + vel * params.deltaT + 0.5 * f * params.deltaT * params.deltaT;
    vel = vel + f * params.deltaT;

	vec3 deltaPos = vec3(0, 0, 0);
    float tot = 0.0;

	// left
	if (id.x > 0) {
        deltaPos += calculateDistanceConstraints(pos, particleIn[index - 1].pos.xyz, params.restDistH);
        tot += 1.0;
	} 
	// right
	if (id.x < params.particleCount.x - 1) {
        deltaPos += calculateDistanceConstraints(pos, particleIn[index + 1].pos.xyz, params.restDistH);
        tot += 1.0;
	}
	// lower
	if (id.y < params.particleCount.y - 1) {
        deltaPos += calculateDistanceConstraints(pos, particleIn[index + params.particleCount.x].pos.xyz, params.restDistV);
        tot += 1.0;
	} 
	// upper
	if (id.y > 0) {
        deltaPos += calculateDistanceConstraints(pos, particleIn[index - params.particleCount.x].pos.xyz, params.restDistV);
        tot += 1.0;
	} 
	// upper-left
	if ((id.x > 0) && (id.y < params.particleCount.y - 1)) {
        deltaPos += calculateDistanceConstraints(pos, particleIn[index + params.particleCount.x - 1].pos.xyz, params.restDistD);
        tot += 1.0;
	}
	// lower-left
	if ((id.x > 0) && (id.y > 0)) {
        deltaPos += calculateDistanceConstraints(pos, particleIn[index - params.particleCount.x - 1].pos.xyz, params.restDistD);
        tot += 1.0;
	}
	// upper-right
	if ((id.x < params.particleCount.x - 1) && (id.y < params.particleCount.y - 1)) {
        deltaPos += calculateDistanceConstraints(pos, particleIn[index + params.particleCount.x + 1].pos.xyz, params.restDistD);
        tot += 1.0;
	}
	// lower-right
	if ((id.x < params.particleCount.x - 1) && (id.y > 0)) {
        deltaPos += calculateDistanceConstraints(pos, particleIn[index - params.particleCount.x + 1].pos.xyz, params.restDistD);
        tot += 1.0;
	}

    particleOut[index].pos = (tot == 0.0) ? vec4(pos, 1.0) : vec4((deltaPos / tot) + pos, 1.0);
	pos = (tot == 0.0) ? pos : ((deltaPos / tot) + pos);

	// Bending forces from neighboring particles
	/////////////////////////////

    vec3 deltaP = vec3(0, 0, 0);
    tot = 0.0;

    if (id.y > 1 && id.x > 0)
    {
        vec3 ret = calculateBendingConstraints(
            particleIn[index - params.particleCount.x - 1].pos.xyz,
            particleIn[index - params.particleCount.x].pos.xyz,
            particleIn[index - 2 * params.particleCount.x - 1].pos.xyz,
            pos,
            3
        );
        deltaP += ret;
        tot += 1.0;
    }

    if (id.y > 0 && id.y < params.particleCount.y - 1 && id.x > 0)
    {
        vec3 ret = calculateBendingConstraints(
            particleIn[index - 1].pos.xyz,
            pos,
            particleIn[index - params.particleCount.x - 1].pos.xyz,
            particleIn[index + params.particleCount.x].pos.xyz,
            1
        );
        deltaP += ret;
        tot += 1.0;
    }

    if (id.y > 0 && id.y < params.particleCount.y - 1 && id.x < params.particleCount.x - 1)
    {
        vec3 ret = calculateBendingConstraints(
            pos,
            particleIn[index + 1].pos.xyz,
            particleIn[index - params.particleCount.x].pos.xyz,
            particleIn[index + params.particleCount.x + 1].pos.xyz,
            0
        );
        deltaP += ret;
        tot += 1.0;
    }

    if (id.y < params.particleCount.y - 2 && id.x < params.particleCount.x - 1)
    {
        vec3 ret = calculateBendingConstraints(
            particleIn[index + params.particleCount.x].pos.xyz,
            particleIn[index + params.particleCount.x + 1].pos.xyz,
            pos,
            particleIn[index + 2 * params.particleCount.x + 1].pos.xyz,
            2
        );
        deltaP += ret;
        tot += 1.0;
    }
	//
    if (id.y > 0 && id.y < params.particleCount.y - 1 && id.x > 0)
    {
        vec3 ret = calculateBendingConstraints(
            pos,
            particleIn[index - 1].pos.xyz,
            particleIn[index - params.particleCount.x].pos.xyz,
            particleIn[index + params.particleCount.x - 1].pos.xyz,
            0
        );
        deltaP += ret;
        tot += 1.0;
    }
	//
    if (id.y < params.particleCount.y - 2 && id.x > 0)
    {
        vec3 ret = calculateBendingConstraints(
            particleIn[index + params.particleCount.x].pos.xyz,
            particleIn[index + params.particleCount.x - 1].pos.xyz,
            pos,
            particleIn[index + 2 * params.particleCount.x - 1].pos.xyz,
            2
        );
        deltaP += ret;
        tot += 1.0;
    }
	//
    if (id.y > 2 && id.x < params.particleCount.x - 1)
    {
        vec3 ret = calculateBendingConstraints(
            particleIn[index - params.particleCount.x + 1].pos.xyz,
            particleIn[index - params.particleCount.x].pos.xyz,
            particleIn[index - 2 * params.particleCount.x + 1].pos.xyz,
            pos,
            3
        );
        deltaP += ret;
        tot += 1.0;
    }
	//
    if (id.y > 0 && id.y < params.particleCount.y - 1 && id.x < params.particleCount.x - 1)
    {
        vec3 ret = calculateBendingConstraints(
            particleIn[index + 1].pos.xyz,
            pos,
            particleIn[index - params.particleCount.x + 1].pos.xyz,
            particleIn[index + params.particleCount.x].pos.xyz,
             1
        );
        deltaP += ret;
        tot += 1.0;
    }

    //
    if (id.y > 0 && id.x < params.particleCount.x - 1 && id.x > 0)
    {
        vec3 ret = calculateBendingConstraints(
            pos,
            particleIn[index - params.particleCount.x].pos.xyz,
            particleIn[index + 1].pos.xyz,
            particleIn[index - params.particleCount.x - 1].pos.xyz,
            0
        );
        deltaP += ret;
        tot += 1.0;
    }

    if (id.y < params.particleCount.y - 1 && id.x < params.particleCount.x - 1 && id.x > 0)
    {
        vec3 ret = calculateBendingConstraints(
            particleIn[index + params.particleCount.x].pos.xyz,
            pos,
            particleIn[index - 1].pos.xyz,
            particleIn[index + params.particleCount.x + 1].pos.xyz,
            1
        );
        deltaP += ret;
        tot += 1.0;
    }

    if (id.y > 0 && id.x > 1)
    {
        vec3 ret = calculateBendingConstraints(
            particleIn[index - 1].pos.xyz,
            particleIn[index - params.particleCount.x - 1].pos.xyz,
            particleIn[index - params.particleCount.x - 2].pos.xyz,
            pos,
            3
        );
        deltaP += ret;
        tot += 1.0;
    }

    if (id.y < params.particleCount.y - 1 && id.x < params.particleCount.x - 2)
    {
        vec3 ret = calculateBendingConstraints(
            particleIn[index + params.particleCount.x + 1].pos.xyz,
            particleIn[index + 1].pos.xyz,
            pos,
            particleIn[index + params.particleCount.x + 2].pos.xyz,
            2
        );
        deltaP += ret;
        tot += 1.0;
    }

    if (id.y > 0 && id.x < params.particleCount.x - 1 && id.x > 0)
    {
        vec3 ret = calculateBendingConstraints(
            pos,
            particleIn[index - params.particleCount.x].pos.xyz,
            particleIn[index - 1].pos.xyz,
            particleIn[index - params.particleCount.x + 1].pos.xyz,
            0
        );
        deltaP += ret;
        tot += 1.0;
    }
    if (id.y < params.particleCount.y - 1 && id.x > 1)
    {
        vec3 ret = calculateBendingConstraints(
            particleIn[index + params.particleCount.x - 1].pos.xyz,
            particleIn[index - 1].pos.xyz,
            particleIn[index + params.particleCount.x - 2].pos.xyz,
            pos,
            3
        );
        deltaP += ret;
        tot += 1.0;
    }

    if (id.y < params.particleCount.y - 1 && id.x > 0 && id.x < params.particleCount.x - 1)
    {
        vec3 ret = calculateBendingConstraints(
            particleIn[index + params.particleCount.x].pos.xyz,
            pos,
            particleIn[index + params.particleCount.x - 1].pos.xyz,
            particleIn[index + 1].pos.xyz,
            1
        );
        deltaP += ret;
        tot += 1.0;
    }

    if (id.y > 0 && id.x < params.particleCount.x - 2)
    {
        vec3 ret = calculateBendingConstraints(
            particleIn[index + 1].pos.xyz,
            particleIn[index - params.particleCount.x + 1].pos.xyz,
            pos,
            particleIn[index - params.particleCount.x + 2].pos.xyz,
            2
        );
        deltaP += ret;
        tot += 1.0;
    }

    particleOut[index].pos = (tot == 0.0) ? vec4(pos, 1.0) : vec4((deltaP / tot) + pos, 1.0);
	//////////////////

	// Sphere collision
	vec3 sphereDist = particleOut[index].pos.xyz - params.spherePos.xyz;
	if (length(sphereDist) < params.sphereRadius + 0.01) {
		// If the particle is inside the sphere, push it to the outer radius
		particleOut[index].pos.xyz = params.spherePos.xyz + normalize(sphereDist) * (params.sphereRadius + 0.01);		
		// Cancel out velocity
		particleOut[index].vel = vec4(0.0);
	}

	// Normals
	if (pushConsts.calculateNormals == 1) {
		vec3 normal = vec3(0.0);
		vec3 a, b, c;
		if (id.y > 0) {
			if (id.x > 0) {
				a = particleIn[index - 1].pos.xyz - pos;
				b = particleIn[index - params.particleCount.x - 1].pos.xyz - pos;
				c = particleIn[index - params.particleCount.x].pos.xyz - pos;
				normal += cross(a,b) + cross(b,c);
			}
			if (id.x < params.particleCount.x - 1) {
				a = particleIn[index - params.particleCount.x].pos.xyz - pos;
				b = particleIn[index - params.particleCount.x + 1].pos.xyz - pos;
				c = particleIn[index + 1].pos.xyz - pos;
				normal += cross(a,b) + cross(b,c);
			}
		}
		if (id.y < params.particleCount.y - 1) {
			if (id.x > 0) {
				a = particleIn[index + params.particleCount.x].pos.xyz - pos;
				b = particleIn[index + params.particleCount.x - 1].pos.xyz - pos;
				c = particleIn[index - 1].pos.xyz - pos;
				normal += cross(a,b) + cross(b,c);
			}
			if (id.x < params.particleCount.x - 1) {
				a = particleIn[index + 1].pos.xyz - pos;
				b = particleIn[index + params.particleCount.x + 1].pos.xyz - pos;
				c = particleIn[index + params.particleCount.x].pos.xyz - pos;
				normal += cross(a,b) + cross(b,c);
			}
		}
		particleOut[index].normal = vec4(normalize(normal), 0.0f);
	}
}